name: HugeGraph-LLM CI

on:
  push:
    branches:
      - 'release-*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - name: Prepare HugeGraph Server Environment
      run: |
        docker run -d --name=graph -p 8080:8080 -e PASSWORD=admin hugegraph/hugegraph:1.3.0
        sleep 10

    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/uv
          ~/.cache/pip
        key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('hugegraph-llm/requirements.txt', 'hugegraph-llm/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-venv-${{ matrix.python-version }}-
          ${{ runner.os }}-venv-

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install pytest pytest-cov
        # Debug: Check current directory and file existence
        echo "=== Debug Information ==="
        echo "Current working directory: $(pwd)"
        echo "Listing current directory:"
        ls -la
        echo "Checking hugegraph-llm directory:"
        ls -la hugegraph-llm/
        echo "Checking dependency files:"
        ls -la hugegraph-llm/requirements.txt hugegraph-llm/pyproject.toml 2>/dev/null || echo "Some dependency files not found"
        
        echo "=== Installing Dependencies ==="
        # Prioritize pyproject.toml over requirements.txt for modern dependency management
        if [ -f "hugegraph-llm/pyproject.toml" ]; then
          echo "Installing from pyproject.toml (preferred)..."
          cd hugegraph-llm
          # Install dependencies first, then install package in editable mode
          uv pip install -e .
          cd ..
          echo "✓ Installed from pyproject.toml"
        elif [ -f "hugegraph-llm/requirements.txt" ]; then
          echo "Installing from requirements.txt (fallback)..."
          uv pip install -r hugegraph-llm/requirements.txt
          echo "✓ Installed from requirements.txt"
        else
          echo "✗ No dependency files found!"
          exit 1
        fi
        
    # Verify and complete package installation
    - name: Verify installation
      run: |
        source .venv/bin/activate
        echo "=== Installing hugegraph-python-client ==="
        uv pip install -e ./hugegraph-python-client/
        
        echo "=== Final package verification ==="
        # Re-install hugegraph-llm to ensure all dependencies are resolved
        uv pip install -e ./hugegraph-llm/
        
        echo "=== Installed packages ==="
        uv pip list | grep hugegraph
        
        echo "=== Python path ==="
        python -c "import sys; [print(p) for p in sys.path]"
        
        echo "=== Testing critical imports ==="
        python -c "from hugegraph_llm.models.llms.qianfan import QianfanClient; print('✓ QianfanClient imported successfully')" || echo "✗ QianfanClient import failed"
        python -c "from hugegraph_llm.models.llms.base import BaseLLM; print('✓ BaseLLM imported successfully')" || echo "✗ BaseLLM import failed"
        python -c "import hugegraph_llm; print('✓ hugegraph_llm module imported successfully')" || echo "✗ hugegraph_llm import failed"

    - name: Run unit tests
      run: |
        source .venv/bin/activate
        export SKIP_EXTERNAL_SERVICES=true
        cd hugegraph-llm
        echo "=== Running unit tests ==="
        echo "Current directory: $(pwd)"
        echo "Testing import before pytest..."
        python -c "from hugegraph_llm.models.llms.qianfan import QianfanClient; print('✓ Import successful')"
        python -m pytest src/tests/config/ src/tests/document/ src/tests/middleware/ src/tests/operators/ src/tests/models/ src/tests/indices/ src/tests/test_utils.py -v --tb=short

    - name: Run integration tests
      run: |
        source .venv/bin/activate
        export SKIP_EXTERNAL_SERVICES=true
        cd hugegraph-llm
        echo "=== Running integration tests ==="
        python -m pytest src/tests/integration/test_graph_rag_pipeline.py src/tests/integration/test_kg_construction.py src/tests/integration/test_rag_pipeline.py -v --tb=short

    - name: Generate test coverage report
      run: |
        source .venv/bin/activate
        export SKIP_EXTERNAL_SERVICES=true
        cd hugegraph-llm
        echo "=== Generating test coverage report ==="
        python -m pytest src/tests/ --cov=hugegraph_llm --cov-report=xml --cov-report=term-missing --cov-fail-under=70